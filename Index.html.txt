<!DOCTYPE html>
<html lang="de">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Tipp-Kick Liga</title>
<style>
    body {
        font-family: Arial, sans-serif;
        background: linear-gradient(135deg, #e0f7fa, #f1f8e9);
        margin: 0;
        padding: 20px;
    }
    h1 {
        text-align: center;
        margin-bottom: 20px;
    }
    .card {
        background: white;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    label {
        margin-right: 10px;
    }
    input, select, button {
        padding: 8px;
        margin: 5px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }
    button {
        background: #4caf50;
        color: white;
        border: none;
        cursor: pointer;
    }
    button:hover {
        background: #45a049;
    }
    table {
        border-collapse: collapse;
        width: 100%;
        background: white;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }
    th, td {
        border: 1px solid #ddd;
        padding: 10px;
        text-align: center;
    }
    th {
        background: #f4f4f4;
    }
    .medal {
        font-size: 1.2em;
    }
    .results {
        background: white;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .match-item {
        padding: 8px;
        border-bottom: 1px solid #ddd;
        border-radius: 5px;
        margin-bottom: 5px;
        color: white;
        font-weight: bold;
    }
    .match-item:last-child {
        border-bottom: none;
    }
    .match-win {
        background-color: #4caf50; /* gr√ºn */
    }
    .match-loss {
        background-color: #f44336; /* rot */
    }
    .match-draw {
        background-color: #9e9e9e; /* grau */
    }
</style>
</head>
<body>

<h1>üèÜ Tipp-Kick Liga</h1>

<div class="card">
    <h3>Neuen Spieler hinzuf√ºgen</h3>
    <input type="text" id="newPlayerName" placeholder="Spielername">
    <button onclick="addPlayer()">‚ûï Spieler hinzuf√ºgen</button>
</div>

<div class="card">
    <h3>Spiel eintragen</h3>
    <label>Spieltag:
        <input type="number" id="matchday" min="1" placeholder="z.B. 1">
    </label>
    <br>
    <label>Spieler 1:
        <select id="player1"></select>
    </label>
    <input type="number" id="score1" placeholder="Tore" min="0">
    vs.
    <label>Spieler 2:
        <select id="player2"></select>
    </label>
    <input type="number" id="score2" placeholder="Tore" min="0">
    <button onclick="addMatch()">üíæ Spiel speichern</button>
</div>

<div class="card">
    <label>Spieltag filtern:
        <select id="filterMatchday" onchange="updateTable()">
            <option value="all">Alle</option>
        </select>
    </label>
</div>

<table id="leagueTable">
    <thead>
        <tr>
            <th>Platz</th>
            <th>Spieler</th>
            <th>Spiele</th>
            <th>Punkte</th>
            <th>Tordifferenz</th>
            <th>Punkte/Spiel</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<div id="matchResults" class="results" style="display:none;">
    <h3 id="resultsTitle">Ergebnisse Spieltag</h3>
    <div id="resultsList"></div>
</div>

<div class="card">
    <button onclick="exportData()">‚¨áÔ∏è Daten exportieren</button>
    <input type="file" id="importFile" onchange="importData(event)">
    <button onclick="loadFromStorage()">üîÑ Zwischenstand laden</button>
    <button onclick="clearData()">üóëÔ∏è Alle Daten l√∂schen</button>
</div>

<script>
let players = ["Mitschl", "Michl", "Manni", "Tom", "Sascha", "Dieni"];
let matches = [];

function updateDropdowns() {
    const p1 = document.getElementById('player1');
    const p2 = document.getElementById('player2');
    p1.innerHTML = '';
    p2.innerHTML = '';
    players.forEach(player => {
        let opt1 = document.createElement('option');
        opt1.value = player; opt1.textContent = player; p1.appendChild(opt1);
        let opt2 = document.createElement('option');
        opt2.value = player; opt2.textContent = player; p2.appendChild(opt2);
    });
}

function addPlayer() {
    const name = document.getElementById('newPlayerName').value.trim();
    if (!name) return alert("Bitte einen Spielernamen eingeben.");
    if (players.includes(name)) return alert("Spieler existiert bereits.");
    players.push(name);
    updateDropdowns();
    updateTable();
    document.getElementById('newPlayerName').value = '';
}

function addMatch() {
    const p1 = document.getElementById('player1').value;
    const p2 = document.getElementById('player2').value;
    const s1 = parseInt(document.getElementById('score1').value);
    const s2 = parseInt(document.getElementById('score2').value);
    const day = parseInt(document.getElementById('matchday').value);

    if (!p1 || !p2 || isNaN(s1) || isNaN(s2) || p1 === p2 || isNaN(day)) {
        alert("Bitte g√ºltige Daten eingeben.");
        return;
    }

    matches.push({ p1, s1, p2, s2, day });
    localStorage.setItem('tippkickMatches', JSON.stringify(matches));
    updateMatchdayFilter();
    updateTable();
}

function updateMatchdayFilter() {
    const filter = document.getElementById('filterMatchday');
    const days = [...new Set(matches.map(m => m.day))].sort((a,b) => a - b);
    filter.innerHTML = '<option value="all">Alle</option>';
    days.forEach(d => {
        let opt = document.createElement('option');
        opt.value = d;
        opt.textContent = `Spieltag ${d}`;
        filter.appendChild(opt);
    });
}

function updateTable() {
    let stats = {};
    players.forEach(player => {
        stats[player] = { games: 0, points: 0, goalsFor: 0, goalsAgainst: 0 };
    });

    const selectedDay = document.getElementById('filterMatchday').value;
    const filteredMatches = selectedDay === "all" ? matches : matches.filter(m => m.day == selectedDay);

    filteredMatches.forEach(m => {
        stats[m.p1].games++;
        stats[m.p2].games++;
        stats[m.p1].goalsFor += m.s1;
        stats[m.p1].goalsAgainst += m.s2;
        stats[m.p2].goalsFor += m.s2;
        stats[m.p2].goalsAgainst += m.s1;

        if (m.s1 > m.s2) {
            stats[m.p1].points += 3;
        } else if (m.s1 < m.s2) {
            stats[m.p2].points += 3;
        } else {
            stats[m.p1].points += 1;
            stats[m.p2].points += 1;
        }
    });

    let ranking = players.map(player => {
        const st = stats[player];
        return {
            name: player,
            games: st.games,
            points: st.points,
            diff: st.goalsFor - st.goalsAgainst,
            avg: st.games > 0 ? (st.points / st.games).toFixed(2) : "0.00"
        };
    });

    ranking.sort((a,b) => b.points - a.points || b.diff - a.diff);

    const medals = ["ü•á", "ü•à", "ü•â"];
    const tbody = document.querySelector('#leagueTable tbody');
    tbody.innerHTML = '';
    ranking.forEach((r, i) => {
        let medal = i < 3 ? `<span class="medal">${medals[i]}</span>` : i+1;
        tbody.innerHTML += `<tr>
            <td>${medal}</td>
            <td>${r.name}</td>
            <td>${r.games}</td>
            <td>${r.points}</td>
            <td>${r.diff}</td>
            <td>${r.avg}</td>
        </tr>`;
    });

    // Ergebnisse f√ºr den Spieltag anzeigen
    const resultsDiv = document.getElementById('matchResults');
    const resultsList = document.getElementById('resultsList');
    const resultsTitle = document.getElementById('resultsTitle');
    if (selectedDay !== "all") {
        resultsTitle.textContent = `Ergebnisse Spieltag ${selectedDay}`;
        resultsList.innerHTML = '';
        filteredMatches.forEach(m => {
            let cssClass;
            if (m.s1 > m.s2) cssClass = "match-win";
            else if (m.s1 < m.s2) cssClass = "match-loss";
            else cssClass = "match-draw";

            resultsList.innerHTML += `<div class="match-item ${cssClass}">
                ${m.p1} ${m.s1} : ${m.s2} ${m.p2}
            </div>`;
        });
        resultsDiv.style.display = 'block';
    } else {
        resultsDiv.style.display = 'none';
    }
}

function exportData() {
    const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(matches));
    const dl = document.createElement('a');
    dl.setAttribute('href', dataStr);
    dl.setAttribute('download', 'tippkick_data.json');
    dl.click();
}

function importData(event) {
    const file = event.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = e => {
        try {
            matches = JSON.parse(e.target.result);
            localStorage.setItem('tippkickMatches', JSON.stringify(matches));
            updateMatchdayFilter();
            updateTable();
        } catch {
            alert("Ung√ºltige Datei.");
        }
    };
    reader.readAsText(file);
}

function loadFromStorage() {
    matches = JSON.parse(localStorage.getItem('tippkickMatches') || '[]');
    updateMatchdayFilter();
    updateTable();
}

function clearData() {
    if (confirm("Willst du wirklich alle Daten l√∂schen?")) {
        matches = [];
        localStorage.removeItem('tippkickMatches');
        updateMatchdayFilter();
        updateTable();
    }
}

updateDropdowns();
loadFromStorage();
</script>
</body>
</html>
